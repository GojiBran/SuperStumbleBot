THIS IS WORKING 12:30pm 3/5/2025

// GojiBux --------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------

// Universal GojiBux Storage (Per-user + LGH Bank)
let userBalances = JSON.parse(localStorage.getItem("userBalances")) || {};
let lghBank = parseInt(localStorage.getItem("lghBank")) || 1; // LGH Bank (total stored balance)

// Function to save user balances
function saveBalances() {
    localStorage.setItem("userBalances", JSON.stringify(userBalances));
    localStorage.setItem("lghBank", lghBank);
}

// 🏦 `.mybux` - Display the user's GojiBux balance
if (wsmsg["text"].toLowerCase() === ".mybux") {
    const handle = wsmsg["handle"];
    const username = userHandles[handle];
    const nickname = userNicknames[username]?.nickname || username || "you";

    if (!username) {
        respondWithMessage.call(this, "🤖 Error: Could not identify your username.");
        return;
    }

    const balance = userBalances[username]?.balance || 1;

    respondWithMessage.call(this, `🤖 ${nickname}, your GojiBux balance is 💵 ${balance.toLocaleString()} GBX.`);
}

// 🏛 `.lgh` - Show the total GojiBux stored in the LGH Bank
if (wsmsg["text"].toLowerCase() === ".lgh") {
    respondWithMessage.call(this, `🏦 LGH Bank currently holds 💰 ${lghBank.toLocaleString()} GBX in total!`);
}

// 💰 `.gojibux` - Earn a random amount of GojiBux (Adds to LGH)
if (wsmsg["text"].toLowerCase() === ".gojibux") {
    const handle = wsmsg["handle"];
    const username = userHandles[handle];
    const nickname = userNicknames[username]?.nickname || username || "you";

    if (!username) {
        respondWithMessage.call(this, "🤖 Error: Could not identify your username.");
        return;
    }

    if (!userBalances[username]) {
        userBalances[username] = { balance: 1 };
    }

    const randomIncrease = Math.floor(Math.random() * (2000 - 20 + 1)) + 20;
    userBalances[username].balance += randomIncrease;
    lghBank += randomIncrease; // Add to LGH bank

    saveBalances();

    respondWithMessage.call(this, `📈 ${nickname} earned 💵 ${randomIncrease.toLocaleString()} GBX!\nNew Balance: 💵 ${userBalances[username].balance.toLocaleString()} GBX\n🏦 LGH Bank Total: 💰 ${lghBank.toLocaleString()} GBX`);
}

// 📉 `.$NARF` - Display the negative GojiBux balance
if (wsmsg["text"].toLowerCase() === ".$narf") {
    const handle = wsmsg["handle"];
    const username = userHandles[handle];
    const nickname = userNicknames[username]?.nickname || username || "you";

    if (!username) {
        respondWithMessage.call(this, "🤖 Error: Could not identify your username.");
        return;
    }

    const balance = userBalances[username]?.balance || 1;

    respondWithMessage.call(this, `📉 ${nickname}, $NARF value: 💵 ${(-balance).toLocaleString()} $NRF`);
}

// 🔄 `.resetGojiBux` - Reset only the user's balance to 1 GBX
if (wsmsg["text"].toLowerCase() === ".resetgojibux") {
    const handle = wsmsg["handle"];
    const username = userHandles[handle];
    const nickname = userNicknames[username]?.nickname || username || "you";

    if (!username) {
        respondWithMessage.call(this, "🤖 Error: Could not identify your username.");
        return;
    }

    if (userBalances[username]) {
        lghBank -= userBalances[username].balance - 1; // Adjust LGH
        userBalances[username].balance = 1;
        saveBalances();

        respondWithMessage.call(this, `🤖 ${nickname}, your GojiBux balance has been reset to 💵 1 GBX.`);
    } else {
        respondWithMessage.call(this, `🤖 ${nickname}, you don't have a GojiBux balance yet! Use .gojibux to start earning.`);
    }
}

// 🦹 `.steal` - Randomly steal GojiBux from another user
if (wsmsg["text"].toLowerCase() === ".steal") {
    const handle = wsmsg["handle"];
    const username = userHandles[handle];
    const nickname = userNicknames[username]?.nickname || username || "you";

    if (!username) {
        respondWithMessage.call(this, "🤖 Error: Could not identify your username.");
        return;
    }

    // Get all usernames with balances (excluding the thief)
    const eligibleUsers = Object.keys(userBalances).filter(user => user !== username);

    if (eligibleUsers.length === 0) {
        respondWithMessage.call(this, "🤖 There's no one to steal from!");
        return;
    }

    // Pick a random victim
    const victimUsername = eligibleUsers[Math.floor(Math.random() * eligibleUsers.length)];
    const victimNickname = userNicknames[victimUsername]?.nickname || victimUsername || "someone";

    // Amount to steal (10% of the victim's balance, minimum 1 GBX)
    const stealAmount = Math.max(1, Math.floor(userBalances[victimUsername].balance * 0.1));

    // Ensure the victim has enough to steal from
    if (userBalances[victimUsername].balance < 2) {
        respondWithMessage.call(this, `🤖 ${victimNickname} is broke! Nothing to steal.`);
        return;
    }

    // Transfer the stolen amount (LGH does NOT change)
    userBalances[victimUsername].balance -= stealAmount;
    userBalances[username].balance = (userBalances[username].balance || 1) + stealAmount;
    saveBalances();

    respondWithMessage.call(this, `🦹 ${nickname} stole 💵 ${stealAmount.toLocaleString()} GBX from ${victimNickname}!`);
}

// 💥 `.bankrob` - Attempt to rob the LGH Bank
if (wsmsg["text"].toLowerCase() === ".bankrob") {
    const handle = wsmsg["handle"];
    const username = userHandles[handle];
    const nickname = userNicknames[username]?.nickname || username || "you";

    if (!username) {
        respondWithMessage.call(this, "🤖 Error: Could not identify your username.");
        return;
    }

    // Ensure the bank has enough funds to rob
    if (lghBank < 100) {
        respondWithMessage.call(this, "🏦 LGH Bank is too empty to rob!");
        return;
    }

    // Success rate: 50% chance to succeed
    const success = Math.random() < 0.5;

    if (success) {
        // Steal 5-15% of the LGH Bank balance
        const stolenAmount = Math.floor(lghBank * (Math.random() * 0.1 + 0.05)); // 5% to 15%
        lghBank -= stolenAmount;
        userBalances[username].balance = (userBalances[username].balance || 1) + stolenAmount;
        saveBalances();

        respondWithMessage.call(this, `💰 ${nickname} successfully robbed the LGH Bank and stole 💵 ${stolenAmount.toLocaleString()} GBX!\n🏦 LGH Bank now holds 💰 ${lghBank.toLocaleString()} GBX.`);
    } else {
        // Failed attempt, lose 10-30% of user's balance
        const lossAmount = Math.max(1, Math.floor(userBalances[username].balance * (Math.random() * 0.2 + 0.1))); // 10% to 30%
        userBalances[username].balance -= lossAmount;
        lghBank += lossAmount;
        saveBalances();

        respondWithMessage.call(this, `🚔 ${nickname} got caught robbing LGH Bank and lost 💵 ${lossAmount.toLocaleString()} GBX!\n🏦 LGH Bank now holds 💰 ${lghBank.toLocaleString()} GBX.`);
    }
}

// 💰 `.donatebank [amount]` - Donate GojiBux to LGH Bank
if (wsmsg["text"].toLowerCase().startsWith(".donatebank ")) {
    const handle = wsmsg["handle"];
    const username = userHandles[handle];
    const nickname = userNicknames[username]?.nickname || username || "you";
    const amount = parseInt(wsmsg["text"].split(" ")[1]);

    if (!username) {
        respondWithMessage.call(this, "🤖 Error: Could not identify your username.");
        return;
    }

    if (isNaN(amount) || amount <= 0 || (userBalances[username]?.balance || 0) < amount) {
        respondWithMessage.call(this, "🤖 Invalid amount or insufficient funds.");
        return;
    }

    // Deduct GojiBux from user and add it to LGH Bank
    userBalances[username].balance -= amount;
    lghBank += amount;
    saveBalances();
    localStorage.setItem("lghBank", lghBank);

    respondWithMessage.call(this, `🏦 ${nickname} donated **💵 ${amount.toLocaleString()} GBX** to LGH Bank!`);
}

// Weed Stash -----------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------

// 🌿 Universal Weed Storage (Per-user)
let userWeedStashes = JSON.parse(localStorage.getItem("userWeedStashes")) || {};

// 🌿 Global Weed Storage (WGH - Weed Global Holdings)
let wghBank = parseInt(localStorage.getItem("wghBank")) || 0;

// 🌿 Dynamic Weed Pricing Variables
let weedBuyPrice = parseInt(localStorage.getItem("weedBuyPrice")) || 10;
let weedSellPrice = parseInt(localStorage.getItem("weedSellPrice")) || 8;

// Function to update weed prices dynamically
function updateWeedPrices() {
    weedBuyPrice = Math.max(5, Math.floor(weedBuyPrice * (1 + (Math.random() * 0.1 - 0.05))));
    weedSellPrice = Math.max(4, Math.floor(weedSellPrice * (1 + (Math.random() * 0.1 - 0.05))));
    localStorage.setItem("weedBuyPrice", weedBuyPrice);
    localStorage.setItem("weedSellPrice", weedSellPrice);
}

// Run price update every 10-30 minutes
setInterval(updateWeedPrices, Math.random() * (30 - 10) * 60000 + (10 * 60000));

// Function to save user weed stashes
function saveWeedStashes() {
    localStorage.setItem("userWeedStashes", JSON.stringify(userWeedStashes));
}

// Function to save WGH Bank
function saveWGHBank() {
    localStorage.setItem("wghBank", wghBank);
}

// 🌿 Universal Joint Storage (Per-user)
let userJointStashes = JSON.parse(localStorage.getItem("userJointStashes")) || {};

// Function to save user joint stashes
function saveJointStashes() {
    localStorage.setItem("userJointStashes", JSON.stringify(userJointStashes));
}

// 🌿 `.buyweed [amount]` - Buy weed using GojiBux
if (wsmsg["text"].toLowerCase().startsWith(".buyweed ")) {
    const handle = wsmsg["handle"];
    const username = userHandles[handle];
    const nickname = userNicknames[username]?.nickname || username || "you";
    const amount = parseInt(wsmsg["text"].split(" ")[1]);

    if (!username || isNaN(amount) || amount <= 0) {
        respondWithMessage.call(this, "🤖 Usage: .buyweed [amount]");
        return;
    }

    const cost = amount * weedBuyPrice;
    if ((userBalances[username]?.balance || 0) < cost) {
        respondWithMessage.call(this, `🤖 ${nickname}, you don't have enough GojiBux! Weed currently costs 💵 ${weedBuyPrice} GBX per gram.`);
        return;
    }

    // Deduct money and add weed to stash
    userBalances[username].balance -= cost;
    userWeedStashes[username] = (userWeedStashes[username] || 0) + amount;
    saveBalances();
    saveWeedStashes();

    respondWithMessage.call(this, `🌿 ${nickname} bought ${amount} grams of weed for 💵 ${cost.toLocaleString()} GBX.`);

    // Police Bust Check (10% chance)
    if (Math.random() < 0.1) {
        const bustAmount = Math.max(1, Math.floor(userWeedStashes[username] * (Math.random() * 0.3 + 0.2)));
        userWeedStashes[username] = Math.max(0, userWeedStashes[username] - bustAmount);
        saveWeedStashes();
        respondWithMessage.call(this, `🚔 Oh no! ${nickname} got busted and lost 🌿 ${bustAmount.toLocaleString()} grams of weed!`);

        // 1% chance of full stash raid
        if (Math.random() < 0.01) {
            userWeedStashes[username] = 0;
            saveWeedStashes();
            respondWithMessage.call(this, `🚨 Raid Alert! ${nickname} got **fully raided** and lost all their weed!`);
        }
    }
}

// 💰 `.sellweed [amount]` - Sell weed for GojiBux
if (wsmsg["text"].toLowerCase().startsWith(".sellweed ")) {
    const handle = wsmsg["handle"];
    const username = userHandles[handle];
    const nickname = userNicknames[username]?.nickname || username || "you";
    const amount = parseInt(wsmsg["text"].split(" ")[1]);

    if (!username || isNaN(amount) || amount <= 0) {
        respondWithMessage.call(this, "🤖 Usage: .sellweed [amount]");
        return;
    }

    if ((userWeedStashes[username] || 0) < amount) {
        respondWithMessage.call(this, `🤖 ${nickname}, you don't have enough weed to sell.`);
        return;
    }

    const earnings = amount * weedSellPrice;
    userWeedStashes[username] -= amount;
    userBalances[username].balance = (userBalances[username].balance || 0) + earnings;
    saveBalances();
    saveWeedStashes();

    respondWithMessage.call(this, `💰 ${nickname} sold ${amount} grams of weed for 💵 ${earnings.toLocaleString()} GBX.`);

    // Police Bust Check (10% chance)
    if (Math.random() < 0.1) {
        const bustAmount = Math.max(1, Math.floor(userWeedStashes[username] * (Math.random() * 0.3 + 0.2)));
        userWeedStashes[username] -= bustAmount;
        saveWeedStashes();
        respondWithMessage.call(this, `🚔 ${nickname} got caught selling and lost 🌿 ${bustAmount.toLocaleString()} grams of weed!`);
    }
}

// 💰 `.donateweed [amount]` - Donate weed to WGH
if (wsmsg["text"].toLowerCase().startsWith(".donateweed ")) {
    const handle = wsmsg["handle"];
    const username = userHandles[handle];
    const nickname = userNicknames[username]?.nickname || username || "you";
    const amount = parseInt(wsmsg["text"].split(" ")[1]);

    if (!username || isNaN(amount) || amount <= 0 || (userWeedStashes[username] || 0) < amount) {
        respondWithMessage.call(this, "🤖 Invalid amount or insufficient stash.");
        return;
    }

    userWeedStashes[username] -= amount;
    wghBank += amount;
    saveWeedStashes();
    saveWGHBank();

    respondWithMessage.call(this, `🌿 ${nickname} donated ${amount} grams of weed to the WGH stash!`);
}

// 💰 `.withdrawweed [amount]` - Withdraw weed from WGH
if (wsmsg["text"].toLowerCase().startsWith(".withdrawweed ")) {
    const handle = wsmsg["handle"];
    const username = userHandles[handle];
    const nickname = userNicknames[username]?.nickname || username || "you";
    const amount = parseInt(wsmsg["text"].split(" ")[1]);

    if (!username || isNaN(amount) || amount <= 0 || wghBank < amount) {
        respondWithMessage.call(this, "🤖 Invalid amount or insufficient stash in WGH.");
        return;
    }

    wghBank -= amount;
    userWeedStashes[username] = (userWeedStashes[username] || 0) + amount;
    saveWeedStashes();
    saveWGHBank();

    respondWithMessage.call(this, `🌿 ${nickname} withdrew ${amount} grams of weed from WGH!`);
}

// 🔄 `.sendweed [username] [amount]` - Send weed to another user
if (wsmsg["text"].toLowerCase().startsWith(".sendweed ")) {
    const args = wsmsg["text"].split(" ");
    if (args.length < 3) {
        respondWithMessage.call(this, "🤖 Usage: .sendweed [username] [amount]");
        return;
    }

    const handle = wsmsg["handle"];
    const sender = userHandles[handle];
    const senderNickname = userNicknames[sender]?.nickname || sender || "you";
    const receiver = args[1].toLowerCase();
    const amount = parseInt(args[2]);

    if (!sender || !userNicknames[receiver]) {
        respondWithMessage.call(this, "🤖 Error: Could not find the recipient.");
        return;
    }

    if (isNaN(amount) || amount <= 0 || (userWeedStashes[sender] || 0) < amount) {
        respondWithMessage.call(this, "🤖 Invalid amount or insufficient stash.");
        return;
    }

    userWeedStashes[sender] -= amount;
    userWeedStashes[receiver] = (userWeedStashes[receiver] || 0) + amount;
    saveWeedStashes();

    respondWithMessage.call(this, `🌿 ${senderNickname} sent **${amount} grams** of weed to ${receiver}!`);
}

// 🔥 `.weedprice` - Show current dynamic weed prices
if (wsmsg["text"].toLowerCase() === ".weedprice") {
    respondWithMessage.call(this, `🌿 Current Weed Prices:\n💵 Buy: ${weedBuyPrice.toLocaleString()} GBX/gram\n💰 Sell: ${weedSellPrice.toLocaleString()} GBX/gram`);
}

// 🏦 `.wgh` - Check global stash
if (wsmsg["text"].toLowerCase() === ".wgh") {
    respondWithMessage.call(this, `🏦 WGH Stash currently holds 🌿 ${wghBank.toLocaleString()} grams of weed.`);
}

// 📊 `.topbux` - Show the top 10 richest users in GojiBux
if (wsmsg["text"].toLowerCase() === ".topbux") {
    let sortedUsers = Object.entries(userBalances)
        .sort((a, b) => (b[1]?.balance || 0) - (a[1]?.balance || 0))
        .slice(0, 10);

    if (sortedUsers.length === 0) {
        respondWithMessage.call(this, "🤖 No GojiBux data available.");
        return;
    }

    let leaderboard = "📊 **Top 10 GojiBux Holders** 💵\n";
    sortedUsers.forEach(([username, data], index) => {
        const nickname = userNicknames[username]?.nickname || username;
        leaderboard += `${index + 1}. ${nickname} - 💵 ${data.balance.toLocaleString()} GBX\n`;
    });

    respondWithMessage.call(this, leaderboard.trim());
}

// 🌿 `.topweed` - Show the top 10 users with the most weed stash
if (wsmsg["text"].toLowerCase() === ".topweed") {
    let sortedWeedUsers = Object.entries(userWeedStashes)
        .sort((a, b) => (b[1] || 0) - (a[1] || 0))
        .slice(0, 10);

    if (sortedWeedUsers.length === 0) {
        respondWithMessage.call(this, "🤖 No weed stash data available.");
        return;
    }

    let leaderboard = "🌿 **Top 10 Weed Stashes**\n";
    sortedWeedUsers.forEach(([username, stash], index) => {
        const nickname = userNicknames[username]?.nickname || username;
        leaderboard += `${index + 1}. ${nickname} - 🌿 ${stash.toLocaleString()} grams\n`;
    });

    respondWithMessage.call(this, leaderboard.trim());
}

if (wsmsg['text'].toLowerCase() === ".myweed") {
    const handle = wsmsg['handle'];
    const username = userHandles[handle];
    const stash = userWeedStashes[username] || 0;
    const buyPrice = weedBuyPrice.toLocaleString();
    const sellPrice = weedSellPrice.toLocaleString();

    const messages = [
        `🌿 Your Weed Stash: ${stash} grams`,
        `🔥 Current Weed Prices: Buy: ${buyPrice} GBX/gram | Sell: ${sellPrice} GBX/gram`
    ];

    messages.forEach((msg, index) => {
        setTimeout(() => {
            respondWithMessage.call(this, msg);
        }, index * 1000);
    });
}

if (wsmsg['text'].toLowerCase() === ".economy") {
    const totalLGH = lghBank.toLocaleString();
    const totalWGH = wghBank.toLocaleString();
    const buyPrice = weedBuyPrice.toLocaleString();
    const sellPrice = weedSellPrice.toLocaleString();

    const messages = [
        `🏦 LGH Bank Total: ${totalLGH} GBX`,
        `🏦 WGH Bank Total: ${totalWGH} grams`,
        `🔥 Current Weed Prices: Buy: ${buyPrice} GBX/gram | Sell: ${sellPrice} GBX/gram`
    ];

    messages.forEach((msg, index) => {
        setTimeout(() => {
            respondWithMessage.call(this, msg);
        }, index * 1000);
    });
}

if (wsmsg["text"].toLowerCase().startsWith(".rolljoint ")) {
    const handle = wsmsg["handle"];
    const username = userHandles[handle];
    const nickname = userNicknames[username]?.nickname || username || "you";
    const amount = parseInt(wsmsg["text"].split(" ")[1]);

    if (!username || isNaN(amount) || amount <= 0) {
        respondWithMessage.call(this, "🤖 Usage: .rolljoint [amount]");
        return;
    }

    const requiredWeed = amount * (Math.random() < 0.5 ? 1 : 2); // 1-2 grams per joint
    if ((userWeedStashes[username] || 0) < requiredWeed) {
        respondWithMessage.call(this, `🤖 ${nickname}, you don't have enough weed to roll ${amount} joints.`);
        return;
    }

    // Deduct weed and add joints
    userWeedStashes[username] -= requiredWeed;
    userJointStashes[username] = (userJointStashes[username] || 0) + amount;
    saveWeedStashes();
    saveJointStashes();

    respondWithMessage.call(this, `🌿 ${nickname} rolled **${amount} joints** using ${requiredWeed} grams of weed.`);
}

if (wsmsg["text"].toLowerCase() === ".myjoints") {
    const handle = wsmsg["handle"];
    const username = userHandles[handle];
    const nickname = userNicknames[username]?.nickname || username || "you";
    const stash = userJointStashes[username] || 0;

    respondWithMessage.call(this, `🚬 ${nickname}, you have **${stash} joints** ready to smoke.`);
}

if (wsmsg["text"].toLowerCase().startsWith(".smokejoint ")) {
    const handle = wsmsg["handle"];
    const username = userHandles[handle];
    const nickname = userNicknames[username]?.nickname || username || "you";
    const amount = parseInt(wsmsg["text"].split(" ")[1]);

    if (!username || isNaN(amount) || amount <= 0) {
        respondWithMessage.call(this, "🤖 Usage: .smokejoint [amount]");
        return;
    }

    if ((userJointStashes[username] || 0) < amount) {
        respondWithMessage.call(this, `🤖 ${nickname}, you don't have enough joints to smoke.`);
        return;
    }

    // Deduct joints and add a fun message
    userJointStashes[username] -= amount;
    saveJointStashes();

    const responses = [
        `💨 ${nickname} smoked **${amount} joint(s)** and is feeling chill. 😎`,
        `🔥 ${nickname} sparked up **${amount} joint(s)** and is now flying high. 🚀`,
        `💨 **${amount} joints** down! ${nickname} is baked as hell. 🍃`
    ];
    respondWithMessage.call(this, responses[Math.floor(Math.random() * responses.length)]);
}

if (wsmsg["text"].toLowerCase() === ".sesh") {
    const totalUsers = Object.keys(userWeedStashes).length;

    if (totalUsers === 0) {
        respondWithMessage.call(this, "🤖 No one has any weed for the sesh. Weak.");
        return;
    }

    const totalWeed = Object.values(userWeedStashes).reduce((sum, grams) => sum + grams, 0);

    if (totalWeed < 3.5) {
        respondWithMessage.call(this, "🤖 Not enough weed in the stash for a sesh.");
        return;
    }

    // Determine sesh amount (3.5 - 28 grams, but not more than the total available)
    let seshAmount = Math.min(Math.floor(Math.random() * (28 - 3.5 + 1)) + 3.5, totalWeed);

    // Distribute weed consumption among users
    let consumedTotal = 0;
    let usersSmoked = [];

    while (seshAmount > 0 && Object.keys(userWeedStashes).length > 0) {
        let smokers = Object.keys(userWeedStashes).filter(user => userWeedStashes[user] > 0);
        if (smokers.length === 0) break;

        // Pick a random smoker
        let randomSmoker = smokers[Math.floor(Math.random() * smokers.length)];
        let availableWeed = userWeedStashes[randomSmoker];

        // Determine how much they contribute (between 1g and what's left to be smoked)
        let toSmoke = Math.min(Math.floor(Math.random() * (5 - 1 + 1)) + 1, availableWeed, seshAmount);

        // Deduct from stash
        userWeedStashes[randomSmoker] -= toSmoke;
        seshAmount -= toSmoke;
        consumedTotal += toSmoke;
        usersSmoked.push(`${userNicknames[randomSmoker]?.nickname || randomSmoker} (-${toSmoke}g)`);
    }

    saveWeedStashes();

    if (consumedTotal > 0) {
        respondWithMessage.call(this, `🔥 Group sesh! Smoked **${consumedTotal} grams**.`);
        respondWithMessage.call(this, `💨 Contributions: ${usersSmoked.join(", ")}`);
    } else {
        respondWithMessage.call(this, "🤖 The sesh was weak. No one had enough to spare.");
    }
}

if (wsmsg["text"].toLowerCase().startsWith(".stealweed ")) {
    const args = wsmsg["text"].split(" ");
    if (args.length < 2) {
        respondWithMessage.call(this, "🤖 Usage: .stealweed [username]");
        return;
    }

    const handle = wsmsg["handle"];
    const thief = userHandles[handle];
    const thiefNickname = userNicknames[thief]?.nickname || thief;

    // Normalize victim's username for case-insensitive matching
    const victimInput = args[1].toLowerCase();
    const victim = Object.keys(userWeedStashes).find(user => user.toLowerCase() === victimInput);

    if (!victim) {
        respondWithMessage.call(this, "🤖 That user doesn't exist or has no weed.");
        return;
    }

    if ((userWeedStashes[victim] || 0) < 1) {
        respondWithMessage.call(this, `🤖 ${userNicknames[victim]?.nickname || victim} doesn't have any weed to steal.`);
        return;
    }

    let stealAmount = Math.floor(Math.random() * 5) + 1;
    let caught = Math.random() < 0.5;

    if (caught) {
        // Thief gets caught and loses double the amount they tried to steal
        userWeedStashes[thief] = Math.max(0, (userWeedStashes[thief] || 0) - (stealAmount * 2));
        saveWeedStashes();
        respondWithMessage.call(this, `🚨 ${thiefNickname} got **CAUGHT** trying to rob **${userNicknames[victim]?.nickname || victim}**! Lost **${stealAmount * 2} grams** instead!`);
    } else {
        // Successful steal
        userWeedStashes[victim] -= stealAmount;
        userWeedStashes[thief] = (userWeedStashes[thief] || 0) + stealAmount;
        saveWeedStashes();
        respondWithMessage.call(this, `😈 ${thiefNickname} successfully stole **${stealAmount} grams** from ${userNicknames[victim]?.nickname || victim}!`);
    }
}

// ⚠️ `.clearGojiBux` - Wipe all balances & reset LGH (Admin-only)
if (wsmsg["text"].toLowerCase() === ".cleargojibux") {
    userBalances = {};
    lghBank = 1; // Reset LGH
    localStorage.removeItem("userBalances");
    localStorage.removeItem("lghBank");

    respondWithMessage.call(this, "🤖 All GojiBux balances and LGH Bank have been cleared.");
}

//-----------------------------------------------------------------------------------------------------------------------------------

if (wsmsg['text'].toLowerCase() === ".self") {
    const handle = wsmsg['handle'];
    const username = userHandles[handle]; // Get persistent username
    const user = userNicknames[username]; // Get user data
    const balance = userBalances[username]?.balance || 1; // Fetch GojiBux balance
    const stash = userWeedStashes[username] || 0; // Fetch user's weed stash

    if (user) {
        const messages = [
            `🤖 Your Info:\nNickname: ${user.nickname}\nUsername: ${user.username}`,
            `Status: ${user.modStatus}\nHandle: ${user.handle}`,
            `💵 GojiBux Balance: ${balance.toLocaleString()} GBX`,
            `🌿 Weed Stash: ${stash} grams`
        ];

        messages.forEach((msg, index) => {
            setTimeout(() => {
                respondWithMessage.call(this, msg);
            }, index * 1000);
        });
    } else {
        respondWithMessage.call(this, "🤖 Sorry, I couldn't find your information.");
    }
}